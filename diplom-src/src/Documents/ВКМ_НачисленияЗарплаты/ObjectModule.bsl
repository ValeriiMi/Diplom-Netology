#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// 1. Проверям, заполнен ли рабочий график
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_РабочийГрафик.Дата
	|ИЗ
	|	РегистрСведений.ВКМ_РабочийГрафик КАК ВКМ_РабочийГрафик
	|ГДЕ
	|	ВКМ_РабочийГрафик.Дата = &Дата";
	
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Не заполнен рабочий график на выбранный месяц!");
		Возврат;
	КонецЕсли;
	
	// 2. Формируем движения основных начислений
	СформироватьДвиженияОсновныхНачислений();
	
	// 3. Рассчитываем начисления по окладу
	РассчитатьОклад();
	
	// 4. Рассчитываем начисления по процентам
	РассчитатьПроценты();
	
	// 5. Рассчитываем начисления по отпускным
	РассчитатьОтпускные();
	
	// 6. Формируем движения удержаний
	СформироватьДвиженияУдержаний();
	
	// 7. Формируем движения по регистру ВКМ_ВзаиморасчетыССотрудниками
	СформироватьДвиженияРегистраВзаиморасчетыССотрудниками();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвиженияОсновныхНачислений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_НачисленияЗарплатыНачисления.НомерСтроки,
	|	ВКМ_НачисленияЗарплатыНачисления.Сотрудник,
	|	ВКМ_НачисленияЗарплатыНачисления.ВидРасчета,
	|	ВКМ_НачисленияЗарплатыНачисления.ДатаНачала,
	|	ВКМ_НачисленияЗарплатыНачисления.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ОкладИПроценты
	|ИЗ
	|	Документ.ВКМ_НачисленияЗарплаты.Начисления КАК ВКМ_НачисленияЗарплатыНачисления
	|ГДЕ
	|	ВКМ_НачисленияЗарплатыНачисления.Ссылка = &Ссылка
	|	И (ВКМ_НачисленияЗарплатыНачисления.ВидРасчета = &Оклад
	|	ИЛИ ВКМ_НачисленияЗарплатыНачисления.ВидРасчета = &Проценты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОкладИПроценты.НомерСтроки КАК НомерСтроки,
	|	ВТ_ОкладИПроценты.Сотрудник КАК Сотрудник,
	|	ВТ_ОкладИПроценты.ВидРасчета КАК ВидРасчета,
	|	ВТ_ОкладИПроценты.ДатаНачала КАК ПериодДействияНачало,
	|	ВТ_ОкладИПроценты.ДатаОкончания КАК ПериодДействияКонец,
	|	NULL КАК БазовыйПериодНачало,
	|	NULL КАК БазовыйПериодКонец
	|ИЗ
	|	ВТ_ОкладИПроценты КАК ВТ_ОкладИПроценты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВКМ_НачисленияЗарплатыНачисления.НомерСтроки,
	|	ВКМ_НачисленияЗарплатыНачисления.Сотрудник,
	|	ВКМ_НачисленияЗарплатыНачисления.ВидРасчета,
	|	ВКМ_НачисленияЗарплатыНачисления.ДатаНачала,
	|	ВКМ_НачисленияЗарплатыНачисления.ДатаОкончания,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВКМ_НачисленияЗарплатыНачисления.ДатаНачала, МЕСЯЦ, -12), МЕСЯЦ),
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ВКМ_НачисленияЗарплатыНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|ИЗ
	|	Документ.ВКМ_НачисленияЗарплаты.Начисления КАК ВКМ_НачисленияЗарплатыНачисления
	|ГДЕ
	|	ВКМ_НачисленияЗарплатыНачисления.Ссылка = &Ссылка
	|	И ВКМ_НачисленияЗарплатыНачисления.ВидРасчета = &Отпуск";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Проценты", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Проценты);
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Регистр ВКМ_ОсновныеНачисления
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		Движение.ПериодРегистрации = Дата;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать();
	
КонецПроцедуры

Процедура РассчитатьОклад()
	
	ЕстьОклад = ПроверитьНаличиеВидаРасчета(ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	
	Если Не ЕстьОклад Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.РабочийДеньФактическийПериодДействия КАК Факт,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.РабочийДеньПериодДействия КАК План,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.Сотрудник
	|ПОМЕСТИТЬ ВТ_ДанныеНачислений
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(ВидРасчета = &Оклад
	|	И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеНачислений.НомерСтроки,
	|	ВТ_ДанныеНачислений.План,
	|	ВТ_ДанныеНачислений.Факт,
	|	ЕСТЬNULL(ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад, 0) КАК Оклад
	|ИЗ
	|	ВТ_ДанныеНачислений КАК ВТ_ДанныеНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Период, Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_ДанныеНачислений.Сотрудник
	|			ИЗ
	|				ВТ_ДанныеНачислений КАК ВТ_ДанныеНачислений)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|		ПО ВТ_ДанныеНачислений.Сотрудник = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник";
	
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1]; 
		СуммаНачисления = Выборка.Оклад * Выборка.Факт / Выборка.План;
		Движение.Сумма = СуммаНачисления;
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	
КонецПроцедуры

Процедура РассчитатьПроценты()
	
	ЕстьПроценты = ПроверитьНаличиеВидаРасчета(ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Проценты);
	
	Если Не ЕстьПроценты Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.Сотрудник,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.ПериодДействияНачало КАК НачалоПериода,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.ПериодДействияКонец КАК КонецПериода
	|ПОМЕСТИТЬ ВТ_ДанныеНачисленийПроцентов
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(ВидРасчета = &Проценты
	|	И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеНачисленийПроцентов.НомерСтроки,
	|	ЕСТЬNULL(ВКМ_ВыполненныеСотрудникомРаботыОбороты.СуммаКОплатеОборот, 0) КАК СуммаКОплате,
	|	ВТ_ДанныеНачисленийПроцентов.НачалоПериода,
	|	ВТ_ДанныеНачисленийПроцентов.КонецПериода
	|ИЗ
	|	ВТ_ДанныеНачисленийПроцентов КАК ВТ_ДанныеНачисленийПроцентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы.Обороты(&НачалоПериода, &КонецПериода,,
	|			Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_ДанныеНачисленийПроцентов.Сотрудник
	|			ИЗ
	|				ВТ_ДанныеНачисленийПроцентов КАК ВТ_ДанныеНачисленийПроцентов)) КАК ВКМ_ВыполненныеСотрудникомРаботыОбороты
	|		ПО ВТ_ДанныеНачисленийПроцентов.Сотрудник = ВКМ_ВыполненныеСотрудникомРаботыОбороты.Сотрудник";
	
	Запрос.УстановитьПараметр("Проценты", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Проценты);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Период", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1]; 
		СуммаНачисления = Выборка.СуммаКОплате;
		Движение.Сумма = СуммаНачисления;
			
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	
КонецПроцедуры

Процедура РассчитатьОтпускные()
	
	ЕстьОтпуск = ПроверитьНаличиеВидаРасчета(ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	
	Если Не ЕстьОтпуск Тогда
		Возврат;
	КонецЕсли;
	
	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.РабочийДеньФактическийПериодДействия, 0) КАК ДнейОтпуска,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.РабочийДеньБазовыйПериод, 0) КАК КоличествоРабочихДней,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.Сотрудник
	|ПОМЕСТИТЬ ВТ_ДанныеНачисленийОтпускных
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(ВидРасчета = &Отпуск
	|	И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеНачисленийОтпускных.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.СуммаБаза, 0) КАК СуммаБаза,
	|	ВТ_ДанныеНачисленийОтпускных.ДнейОтпуска КАК ДнейОтпуска,
	|	ВТ_ДанныеНачисленийОтпускных.КоличествоРабочихДней КАК КоличествоРабочихДней
	|ИЗ
	|	ВТ_ДанныеНачисленийОтпускных КАК ВТ_ДанныеНачисленийОтпускных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(&Измерения, &Измерения,,) КАК
	|			ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления
	|		ПО ВТ_ДанныеНачисленийОтпускных.Сотрудник = ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.Сотрудник";
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1]; 
		СуммаНачисления = Выборка.СуммаБаза * Выборка.ДнейОтпуска / Выборка.КоличествоРабочихДней;
		Движение.Сумма = СуммаНачисления;
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	
КонецПроцедуры

Процедура СформироватьДвиженияУдержаний()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РегистраторРазрез КАК РегистраторРазрез,
	|	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.СуммаБаза) КАК СуммаБаза,
	|	МИНИМУМ(ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.БазовыйПериодНачало) КАК БазовыйПериодНачало,
	|	МАКСИМУМ(ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.БазовыйПериодКонец) КАК БазовыйПериодКонец
	|ИЗ
	|	РегистрРасчета.ВКМ_Удержания.БазаВКМ_ОсновныеНачисления(&Измерения, &Измерения, &Разрезы,) КАК
	|		ВКМ_УдержанияБазаВКМ_ОсновныеНачисления
	|ГДЕ
	|	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РегистраторРазрез = &РегистраторРазрез
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РегистраторРазрез,
	|	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	
	Разрезы = Новый Массив;
	Разрезы.Добавить("Регистратор");
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Разрезы", Разрезы);
	Запрос.УстановитьПараметр("РегистраторРазрез", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Регистр ВКМ_Удержания
		Движение = Движения.ВКМ_Удержания.Добавить();
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = Выборка.Сотрудник;
		Движение.БазовыйПериодНачало = Выборка.БазовыйПериодНачало;
		Движение.БазовыйПериодКонец = Выборка.БазовыйПериодКонец;
		Движение.Сумма = Выборка.СуммаБаза * 13 / 100;	
		
	КонецЦикла;
	
	Движения.ВКМ_Удержания.Записать();
	
КонецПроцедуры

Функция ПроверитьНаличиеВидаРасчета(ВидРасчета)
	
	ЕстьВидРасчета = Ложь;
	
	Для Каждого Движение Из Движения.ВКМ_ОсновныеНачисления Цикл
		
		Если Движение.ВидРасчета = ВидРасчета Тогда
			ЕстьВидРасчета = Истина;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ЕстьВидРасчета;
	
КонецФункции

Процедура СформироватьДвиженияРегистраВзаиморасчетыССотрудниками()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	СУММА(ВКМ_ОсновныеНачисления.Сумма) КАК СуммаНачислений
	|ПОМЕСТИТЬ ВТ_ДанныеНачислений
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
	|ГДЕ
	|	ВКМ_ОсновныеНачисления.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ОсновныеНачисления.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКМ_Удержания.Сотрудник КАК Сотрудник,
	|	СУММА(ВКМ_Удержания.Сумма) КАК СуммаУдержаний
	|ПОМЕСТИТЬ ВТ_ДанныеУдержаний
	|ИЗ
	|	РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
	|ГДЕ
	|	ВКМ_Удержания.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_Удержания.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеНачислений.Сотрудник КАК Сотрудник,
	|	ВТ_ДанныеНачислений.СуммаНачислений КАК СуммаНачислений,
	|	ВТ_ДанныеУдержаний.СуммаУдержаний КАК СуммаУдержаний
	|ИЗ
	|	ВТ_ДанныеНачислений КАК ВТ_ДанныеНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеУдержаний КАК ВТ_ДанныеУдержаний
	|		ПО (ВТ_ДанныеНачислений.Сотрудник = ВТ_ДанныеУдержаний.Сотрудник)";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Сотрудник = Выборка.Сотрудник;
		Движение.Сумма = Выборка.СуммаНачислений - Выборка.СуммаУдержаний;
	
	КонецЦикла;
	
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли